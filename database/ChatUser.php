<?php
// This class (a User Model) is used to store the users in the `chat_user_table` in the database table



class ChatUser
{
	// `chat_user_table` database table column names
	private $user_id;
	private $user_name;
	private $user_email;
	private $user_password;
	private $user_profile;
	private $user_status;
	private $user_created_on;
	private $user_verification_code; // Registration Verification Code sent to the user's email
	private $user_login_status;
	private $user_token; // A random unique string we generate with every login to be used in conjunction with `user_connection_id` to implement One-to-One Private Chat
	private $user_connection_id; // The unique connection ID generated by WebSocket for every connected client (used in conjuntion with `user_token` column to implement One-to-One Private Chat)
	public $connect;

	public function __construct()
	{
		// Establish the database connection
		require_once('Database_connection.php');
		$database_object = new Database_connection;
		$this->connect = $database_object->connect();
	}


	// Setters and Getters
	function setUserId($user_id)
	{
		$this->user_id = $user_id;
	}

	function getUserId()
	{
		return $this->user_id;
	}

	function setUserName($user_name)
	{
		$this->user_name = $user_name;
	}

	function getUserName()
	{
		return $this->user_name;
	}

	function setUserEmail($user_email)
	{
		$this->user_email = $user_email;
	}

	function getUserEmail()
	{
		return $this->user_email;
	}

	function setUserPassword($user_password)
	{
		$this->user_password = $user_password;
	}

	function getUserPassword()
	{
		return $this->user_password;
	}

	function setUserProfile($user_profile)
	{
		$this->user_profile = $user_profile;
	}

	function getUserProfile()
	{
		return $this->user_profile;
	}

	function setUserStatus($user_status)
	{
		$this->user_status = $user_status;
	}

	function getUserStatus()
	{
		return $this->user_status;
	}

	function setUserCreatedOn($user_created_on)
	{
		$this->user_created_on = $user_created_on;
	}

	function getUserCreatedOn()
	{
		return $this->user_created_on;
	}

	function setUserVerificationCode($user_verification_code)
	{
		$this->user_verification_code = $user_verification_code;
	}

	function getUserVerificationCode()
	{
		return $this->user_verification_code;
	}

	function setUserLoginStatus($user_login_status)
	{
		$this->user_login_status = $user_login_status;
	}

	function getUserLoginStatus()
	{
		return $this->user_login_status;
	}

	function setUserToken($user_token)
	{
		$this->user_token = $user_token;
	}

	function getUserToken()
	{
		return $this->user_token;
	}

	function setUserConnectionId($user_connection_id)
	{
		$this->user_connection_id = $user_connection_id;
	}

	function getUserConnectionId()
	{
		return $this->user_connection_id;
	}

	function make_avatar($character)
	{
	    $path = "images/". time() . ".png";
		$image = imagecreate(200, 200);
		$red = rand(0, 255);
		$green = rand(0, 255);
		$blue = rand(0, 255);
	    imagecolorallocate($image, $red, $green, $blue);  
	    $textcolor = imagecolorallocate($image, 255,255,255);

	    $font = dirname(__FILE__) . '/font/arial.ttf';

	    imagettftext($image, 100, 0, 55, 150, $textcolor, $font, $character);
	    imagepng($image, $path);
	    imagedestroy($image);
	    return $path;
	}

	function get_user_data_by_email()
	{
		$query = 
			"SELECT * FROM chat_user_table 
			WHERE user_email = :user_email"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_email', $this->user_email);

		if ($statement->execute())
		{
			$user_data = $statement->fetch(PDO::FETCH_ASSOC);
		}

		return $user_data;
	}

	function save_data()
	{
		$query =
			"INSERT INTO chat_user_table (user_name, user_email, user_password, user_profile, user_status, user_created_on, user_verification_code) 
			VALUES (:user_name, :user_email, :user_password, :user_profile, :user_status, :user_created_on, :user_verification_code)"
		;
		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_name'			   , $this->user_name);
		$statement->bindParam(':user_email'			   , $this->user_email);
		$statement->bindParam(':user_password'		   , $this->user_password);
		$statement->bindParam(':user_profile'		   , $this->user_profile);
		$statement->bindParam(':user_status'		   , $this->user_status);
		$statement->bindParam(':user_created_on'       , $this->user_created_on);
		$statement->bindParam(':user_verification_code', $this->user_verification_code);

		if ($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function is_valid_email_verification_code()
	{
		$query = 
			"SELECT * FROM chat_user_table 
			WHERE user_verification_code = :user_verification_code"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_verification_code', $this->user_verification_code);

		$statement->execute();

		if ($statement->rowCount() > 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function enable_user_account()
	{
		$query = 
			"UPDATE chat_user_table
			SET user_status = :user_status
			WHERE user_verification_code = :user_verification_code"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_status'		   , $this->user_status);
		$statement->bindParam(':user_verification_code', $this->user_verification_code);

		if ($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function update_user_login_data()
	{
		$query =
			"UPDATE chat_user_table 
			SET
				user_login_status = :user_login_status,
				user_token 		  = :user_token  
			WHERE
				user_id = :user_id"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_login_status', $this->user_login_status);
		$statement->bindParam(':user_token'		  , $this->user_token);
		$statement->bindParam(':user_id'		  , $this->user_id);

		if ($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function get_user_data_by_id()
	{
		$query = 
			"SELECT * FROM chat_user_table 
			WHERE user_id = :user_id"
		;

		$statement = $this->connect->prepare($query);
		$statement->bindParam(':user_id', $this->user_id);

		try
		{
			if ($statement->execute())
			{
				$user_data = $statement->fetch(PDO::FETCH_ASSOC);
			}
			else
			{
				$user_data = array();
			}
		}
		catch (Exception $error)
		{
			echo $error->getMessage();
		}


		return $user_data;
	}

	function upload_image($user_profile)
	{
		$extension = explode('.', $user_profile['name']);
		$new_name = rand() . '.' . $extension[1];
		$destination = 'images/' . $new_name;
		move_uploaded_file($user_profile['tmp_name'], $destination);
		return $destination;
	}

	function update_data()
	{
		$query =
			"UPDATE chat_user_table 
			SET
				user_name     = :user_name, 
				user_email    = :user_email, 
				user_password = :user_password, 
				user_profile  = :user_profile  
			WHERE user_id = :user_id"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_name'	  , $this->user_name);
		$statement->bindParam(':user_email'   , $this->user_email);
		$statement->bindParam(':user_password', $this->user_password);
		$statement->bindParam(':user_profile' , $this->user_profile);
		$statement->bindParam(':user_id'	  , $this->user_id);

		if ($statement->execute())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function get_user_all_data()
	{
		$query =
			"SELECT * FROM chat_user_table "
		;

		$statement = $this->connect->prepare($query);
		$statement->execute();
		$data = $statement->fetchAll(PDO::FETCH_ASSOC);

		return $data;
	}

	function get_user_all_data_with_status_count() // This method gets every single (i.e. all users) user's data in `chat_user_table` table and the count of 'Unread' Messages that they (he/she) sent to the authenticated/logged-in user    // To get the number of the 'Unread' Messages sent to the authenticated/logged-in user from EVERY user in the `chat_user_table` database table based on the `status` column of the `chat_message` database table    // In other words, this method returns all user's data and how many 'Unread' Messages they (for every single user) have sent to the authenticated/logged-in user    // Another way to say it: This method returns the all (every) users's data and how many 'Unread' Messages the authenticated/logged-in user received from those users (every user)    // Get the number/count of the 'Unread' Messages that the authenticated/logged-in user received from all members/users
	{
		// The query retrieves information about users from the `chat_user_table` and includes an additional calculated column called `count_status`. This calculated column represents the count of chat messages sent to the authenticated/logged-in user where the `status` is 'No' (the count of the 'Unread' Messages). The query will return a list of users along with the count of such 'Unread' (i.e. `status` = 'No') messages for each user.
		// Query Explanation: For EVERY user in the `chat_user_table` table, select `user_id`, `user_name`, `user_profile`, `user_login_status`, and the count/number of the 'Unread' Messages that they (he/she) sent to the authenticated/logged-in user (by using a Nested Query/Subquery that selects the messages that are sent from every user to the authenticated/logged-in user, and this message is 'Unread' i.e. `status` = 'No'. To further clarify this, here is an example: Select the data of 'Kassem' from `chat_user_table` table and the count of the 'Unread' Messages that he sent to the authenticated/logged-in user)
		$query =
			"SELECT
				user_id,
				user_name,
				user_profile,
				user_login_status,
				(SELECT COUNT(*) FROM chat_message
					WHERE
						to_user_id = :user_id
					AND
						from_user_id = chat_user_table.user_id
					AND
						status = 'No'
				) AS count_status
			FROM chat_user_table"
		;

		$statement = $this->connect->prepare($query);
		$statement->bindParam(':user_id', $this->user_id);
		$statement->execute();
		$data = $statement->fetchAll(PDO::FETCH_ASSOC);

		return $data;
	}

	function update_user_connection_id()
	{
		$query =
			"UPDATE chat_user_table 
			SET user_connection_id = :user_connection_id 
			WHERE user_token = :user_token"
		;

		$statement = $this->connect->prepare($query);

		$statement->bindParam(':user_connection_id', $this->user_connection_id);
		$statement->bindParam(':user_token'		   , $this->user_token);

		$statement->execute();
	}

	function get_user_id_from_token()
	{
		$query =
			"SELECT user_id FROM chat_user_table 
			WHERE user_token = :user_token"
		;

		$statement = $this->connect->prepare($query);
		$statement->bindParam(':user_token', $this->user_token);
		$statement->execute();
		$user_id = $statement->fetch(PDO::FETCH_ASSOC);

		return $user_id;
	}

}



?>